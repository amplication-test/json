/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateJEntityArgs } from "./CreateJEntityArgs";
import { UpdateJEntityArgs } from "./UpdateJEntityArgs";
import { DeleteJEntityArgs } from "./DeleteJEntityArgs";
import { JEntityFindManyArgs } from "./JEntityFindManyArgs";
import { JEntityFindUniqueArgs } from "./JEntityFindUniqueArgs";
import { JEntity } from "./JEntity";
import { JEntityService } from "../jEntity.service";

@graphql.Resolver(() => JEntity)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class JEntityResolverBase {
  constructor(
    protected readonly service: JEntityService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "JEntity",
    action: "read",
    possession: "any",
  })
  async _jEntitiesMeta(
    @graphql.Args() args: JEntityFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [JEntity])
  @nestAccessControl.UseRoles({
    resource: "JEntity",
    action: "read",
    possession: "any",
  })
  async jEntities(
    @graphql.Args() args: JEntityFindManyArgs
  ): Promise<JEntity[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => JEntity, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "JEntity",
    action: "read",
    possession: "own",
  })
  async jEntity(
    @graphql.Args() args: JEntityFindUniqueArgs
  ): Promise<JEntity | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => JEntity)
  @nestAccessControl.UseRoles({
    resource: "JEntity",
    action: "create",
    possession: "any",
  })
  async createJEntity(
    @graphql.Args() args: CreateJEntityArgs
  ): Promise<JEntity> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => JEntity)
  @nestAccessControl.UseRoles({
    resource: "JEntity",
    action: "update",
    possession: "any",
  })
  async updateJEntity(
    @graphql.Args() args: UpdateJEntityArgs
  ): Promise<JEntity | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => JEntity)
  @nestAccessControl.UseRoles({
    resource: "JEntity",
    action: "delete",
    possession: "any",
  })
  async deleteJEntity(
    @graphql.Args() args: DeleteJEntityArgs
  ): Promise<JEntity | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
